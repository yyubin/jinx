//package org.jinx.migration;
//
//import org.jinx.migration.spi.JavaTypeMapper;
//import org.jinx.migration.spi.ValueTransformer;
//import org.jinx.descriptor.*;
//import org.jinx.model.*;
//import org.junit.jupiter.api.DisplayName;
//import org.junit.jupiter.api.Nested;
//import org.junit.jupiter.api.Test;
//
//import java.util.List;
//
//import static org.assertj.core.api.Assertions.assertThat;
//
//class AbstractDialectTest {
//
//    private static class DummyJavaType implements JavaTypeMapper.JavaType {
//        private final String sql;
//        private final boolean quoted;
//        private final String defaultVal;   // null 허용
//
//        DummyJavaType(String sql, boolean quoted, String defaultVal) {
//            this.sql = sql;
//            this.quoted = quoted;
//            this.defaultVal = defaultVal;
//        }
//        @Override public String getSqlType(int l, int p, int s) { return sql; }
//        @Override public boolean needsQuotes() { return quoted; }
//        @Override public String getDefaultValue() { return defaultVal; }
//    }
//
//    private static class DummyMapper implements JavaTypeMapper {
//        @Override public JavaType map(String className) {
//            // 숫자형 vs. 문자열형 구분만 한다.
//            return switch (className) {
//                case "java.lang.Integer", "int"  -> new DummyJavaType("INT", false, "0");
//                case "java.lang.Long", "long"    -> new DummyJavaType("BIGINT", false, null);
//                default                          -> new DummyJavaType("VARCHAR(255)", true, "''");
//            };
//        }
//    }
//
//    private static class DummyTransformer implements ValueTransformer {
//        @Override public String quote(String value, JavaTypeMapper.JavaType type) {
//            return type.needsQuotes() ? "'" + value + "'" : value;
//        }
//    }
//    private static class DummyDialect extends AbstractDialect {
//
//        @Override protected JavaTypeMapper initializeJavaTypeMapper() { return new DummyMapper(); }
//        @Override protected ValueTransformer initializeValueTransformer() { return new DummyTransformer(); }
//
//        @Override public String quoteIdentifier(String id) { return "\"" + id + "\""; }
//
//        @Override
//        public String getPrimaryKeyDefinitionSql(List<String> pkColumns) {
//            return "";
//        }
//
//        @Override
//        public String getConstraintDefinitionSql(ConstraintModel constraint) {
//            return "";
//        }
//
//        @Override
//        public String getAddColumnSql(String table, ColumnModel column) {
//            return "";
//        }
//
//        @Override
//        public String getDropColumnSql(String table, ColumnModel column) {
//            return "";
//        }
//
//        @Override
//        public String getModifyColumnSql(String table, ColumnModel newColumn, ColumnModel oldColumn) {
//            return "";
//        }
//
//        @Override
//        public String getRenameColumnSql(String table, ColumnModel newColumn, ColumnModel oldColumn) {
//            return "";
//        }
//
//        @Override
//        public String getAddConstraintSql(String table, ConstraintModel constraint) {
//            return "";
//        }
//
//        @Override
//        public String getDropConstraintSql(String table, ConstraintModel constraint) {
//            return "";
//        }
//
//        @Override
//        public String getModifyConstraintSql(String table, ConstraintModel newConstraint, ConstraintModel oldConstraint) {
//            return "";
//        }
//
//        @Override
//        public String getDropIndexSql(String table, IndexModel index) {
//            return "";
//        }
//
//        @Override
//        public String getModifyIndexSql(String table, IndexModel newIndex, IndexModel oldIndex) {
//            return "";
//        }
//
//        @Override
//        public String getAddPrimaryKeySql(String table, List<String> pkColumns) {
//            return "";
//        }
//
//        @Override
//        public String getDropPrimaryKeySql(String table) {
//            return "";
//        }
//
//        @Override protected String getIdentityClause(ColumnModel c) { return " GENERATED BY DEFAULT AS IDENTITY"; }
//
//        /* 나머지는 테스트에서 안 씀 */
//        @Override public String getDropPrimaryKeySql(String table, java.util.Collection<ColumnModel> cols) { return ""; }
//
//        @Override
//        public String getAddRelationshipSql(String table, RelationshipModel rel) {
//            return "";
//        }
//
//        @Override
//        public String getDropRelationshipSql(String table, RelationshipModel rel) {
//            return "";
//        }
//
//        @Override
//        public String getModifyRelationshipSql(String table, RelationshipModel newRel, RelationshipModel oldRel) {
//            return "";
//        }
//
//        @Override public MigrationVisitor createVisitor(DiffResult.ModifiedEntity diff) { return null; }
//
//        @Override
//        public String getCreateSequenceSql(SequenceModel seq) {
//            return super.getCreateSequenceSql(seq);
//        }
//
//        @Override
//        public String getDropSequenceSql(SequenceModel seq) {
//            return super.getDropSequenceSql(seq);
//        }
//
//        @Override
//        public String getAlterSequenceSql(SequenceModel newSeq, SequenceModel oldSeq) {
//            return super.getAlterSequenceSql(newSeq, oldSeq);
//        }
//
//        @Override
//        public String getCreateTableGeneratorSql(TableGeneratorModel tg) {
//            return super.getCreateTableGeneratorSql(tg);
//        }
//
//        @Override
//        public String getDropTableGeneratorSql(TableGeneratorModel tg) {
//            return super.getDropTableGeneratorSql(tg);
//        }
//
//        @Override
//        public String getAlterTableGeneratorSql(TableGeneratorModel newTg, TableGeneratorModel oldTg) {
//            return super.getAlterTableGeneratorSql(newTg, oldTg);
//        }
//
//        @Override
//        public String getCreateTableSql(EntityModel entity) {
//            return "";
//        }
//
//        @Override
//        public String getDropTableSql(EntityModel entity) {
//            return "";
//        }
//
//        @Override
//        public String getDropTableSql(String tableName) {
//            return "";
//        }
//
//        @Override
//        public String getAlterTableSql(DiffResult.ModifiedEntity modifiedEntity) {
//            return "";
//        }
//
//        @Override
//        public String getRenameTableSql(String oldTableName, String newTableName) {
//            return "";
//        }
//
//        @Override
//        public String preSchemaObjects(SchemaModel schema) {
//            return "";
//        }
//
//        @Override public JavaTypeMapper getJavaTypeMapper() { return javaTypeMapper; }
//
//        @Override
//        public String openCreateTable(String tableName) {
//            return "";
//        }
//
//        @Override
//        public String closeCreateTable() {
//            return "";
//        }
//
//        @Override
//        public String indexStatement(IndexModel idx, String table) {
//            return "";
//        }
//        // … (불필요한 메서드들은 throw UnsupportedOperationException 해도 무방)
//    }
//
//    private final DummyDialect dialect = new DummyDialect();
//
//    /* ---------- 테스트 ---------- */
//
//    @Nested
//    @DisplayName("getColumnDefinitionSql()")
//    class ColumnDef {
//
//        @Test
//        @DisplayName("IDENTITY + NOT NULL + 기본 SQL 타입 매핑")
//        void identityNotNull() {
//            ColumnModel id = ColumnModel.builder()
//                    .columnName("id")
//                    .javaType("java.lang.Long")
//                    .generationStrategy(GenerationStrategy.IDENTITY)
//                    .isNullable(false)
//                    .build();
//
//            String sql = dialect.getColumnDefinitionSql(id);
//
//            assertThat(sql)
//                    .isEqualTo("\"id\" BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY");
//        }
//
//        @Test
//        @DisplayName("명시적 DEFAULT 값은 ValueTransformer 로 quote 된다")
//        void explicitDefault() {
//            ColumnModel col = ColumnModel.builder()
//                    .columnName("age")
//                    .javaType("java.lang.Integer")
//                    .defaultValue("18")
//                    .build();
//
//            String sql = dialect.getColumnDefinitionSql(col);
//
//            // INT 타입이라 quote 없음
//            assertThat(sql).isEqualTo("\"age\" INT DEFAULT 18");
//        }
//
//        @Test
//        @DisplayName("컬럼에 DEFAULT 가 없으면 JavaType 의 기본값이 사용된다")
//        void javaTypeDefault() {
//            ColumnModel col = ColumnModel.builder()
//                    .columnName("age")
//                    .javaType("java.lang.Integer")   // DummyMapper: default 0
//                    .build();
//
//            String sql = dialect.getColumnDefinitionSql(col);
//
//            assertThat(sql).isEqualTo("\"age\" INT DEFAULT 0");
//        }
//    }
//
//    @Test
//    @DisplayName("columnIsIdentity() 는 GenerationStrategy.IDENTITY 컬럼을 찾아낸다")
//    void columnIsIdentity() {
//        ColumnModel id1 = ColumnModel.builder()
//                .columnName("id")
//                .generationStrategy(GenerationStrategy.IDENTITY)
//                .build();
//        ColumnModel id2 = ColumnModel.builder()
//                .columnName("other")
//                .build();
//
//        boolean result = dialect.columnIsIdentity("id", List.of(id1, id2));
//
//        assertThat(result).isTrue();
//        assertThat(dialect.columnIsIdentity("other", List.of(id1, id2))).isFalse();
//    }
//}
